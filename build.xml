<project name="SPELUNCRServer" default="compile" basedir=".">
    <description>
        This file builds the web server that displays SPELUNCR's data.
    </description>

    <property name="app.name" value="speluncr"/>
    <property name="app.version" value="1.0"/>
    <property name="tomcat.version" value="9.0.39"/>
    <property name="tomcat.home" value="/opt/apache-tomcat-${tomcat.version}"/>
    <property name="build.home" value="${basedir}/build"/>
    <property name="dist.home" value="${basedir}/dist"/>
    <property name="src.home" value="${basedir}/src"/>
    <property name="web.home" value="${basedir}/web"/>
    <property name="compile.debug" value="true"/>
    <property name="compile.deprecation" value="false"/>
    <property name="lib.repository" value="/home/paul/.m2/repository"/>
    <property name="pi4j.jar" value="${lib.repository}/com/pi4j/pi4j-core/1.4/pi4j-core-1.4.jar"/>
    <property name="activation.jar" value="${lib.repository}/javax/activation/javax.activation-api/1.2.0/javax.activation-api-1.2.0.jar"/>
    <property name="jaxb.jar" value="${lib.repository}/javax/xml/bind/jaxb-api/2.3.1/jaxb-api-2.3.1.jar"/>
    <property name="juli.jar" value="${lib.repository}/org/apache/tomcat/tomcat-juli/${tomcat.version}/tomcat-juli-${tomcat.version}.jar"/>
    <property name="servlet.jar" value="${lib.repository}/org/apache/tomcat/tomcat-servlet-api/${tomcat.version}/tomcat-servlet-api-${tomcat.version}.jar"/>
    <property name="util.jar" value="${lib.repository}/org/apache/tomcat/tomcat-util/${tomcat.version}/tomcat-util-${tomcat.version}.jar"/>
    <property name="websocket.jar" value="${lib.repository}/org/apache/tomcat/tomcat-websocket/${tomcat.version}/tomcat-websocket-${tomcat.version}.jar"/>
    <property name="websocketapi.jar" value="${lib.repository}/org/apache/tomcat/tomcat-websocket-api/${tomcat.version}/tomcat-websocket-api-${tomcat.version}.jar"/>

    <path id="complile.classpath">
        <!-- pi4j will go into /WEB-INF/lib -->
        <pathelement location="${pi4j.jar}"/>
        <pathelement location="${activation.jar}"/>
        <pathelement location="${jaxb.jar}"/>
        <pathelement location="${juli.jar}"/>
        <pathelement location="${servlet.jar}"/>
        <pathelement location="${util.jar}"/>
        <pathelement location="${websocket.jar}"/>
        <pathelement location="${websocketapi.jar}"/>
    </path>

    <target name="prepare">
        <!-- Make build directories -->
        <mkdir dir="${build.home}"/>
        <mkdir dir="${build.home}/WEB-INF"/>
        <mkdir dir="${build.home}/WEB-INF/classes"/>

        <!-- Copy static content-->
        <copy todir="${build.home}">
            <fileset dir="${web.home}"/>
        </copy>

        <!-- Copy external dependencies -->
        <mkdir dir="${build.home}/WEB-INF/lib"/>
        <copy todir="${build.home}/WEB-INF/lib" file="${pi4j.jar}"/>
        <copy todir="${build.home}/WEB-INF/lib" file="${activation.jar}"/>
        <copy todir="${build.home}/WEB-INF/lib" file="${jaxb.jar}"/>
    </target>

    <target name="compile" depends="prepare">
        <mkdir dir="${build.home}/WEB-INF/classes"/>

        <!-- Compile java classes -->
        <javac srcdir="${src.home}/main/java"
               destdir="${build.home}/WEB-INF/classes"
               debug="${compile.debug}"
               deprecation="${compile.deprecation}"
               includeantruntime="false">
            <classpath refid="complile.classpath"/>
        </javac>

        <!-- Copy app resources -->
        <copy todir="${build.home}/WEB-INF/classes">
            <fileset dir="${src.home}/main/java" excludes="**/*.java"/>
        </copy>
    </target>

    <target name="build" depends="compile" description="create binary distribution">
        <!-- Create jar file -->
        <jar jarfile="${dist.home}/${app.name}.war" basedir="${build.home}"/>
        <copy todir="${dist.home}" file="${basedir}/start"/>
        <copy todir="${dist.home}" file="${basedir}/stop"/>
        <copy todir="${dist.home}" file="${basedir}/deploy"/>
        <copy todir="${dist.home}" file="${basedir}/LICENSE.txt"/>
        <copy todir="${dist.home}" file="${basedir}/README.md"/>

        <!-- Set shell script permissions to allow reading and execution for all UNIX users -->
        <chmod file="${dist.home}/deploy" perm="ugo+rx"/>
        <chmod file="${dist.home}/start" perm="ugo+rx"/>
        <chmod file="${dist.home}/stop" perm="ugo+rx"/>
    </target>

    <target name="clean">
        <delete dir="${build.home}"/>
        <delete dir="${dist.home}"/>
    </target>

    <target name="all" depends="clean, compile"/>
</project>